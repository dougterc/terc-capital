"refdate",
"return.close"
)
ret.data <- as.matrix(lb.hz[ ,!sapply(lb.hz, anyNA)])
opt <- portfolio.optim(ret.data, shorts = FALSE)
temp <- tribble(
~comboNum,~return, ~risk, ~stocks,
n, opt$pm, opt$ps, paste(c(transpose(line)$V1), collapse = "-")
)
if(n == 1) {
results <- temp
} else {
results <- rbind(results,temp)
}
}
results %>%
arrange(desc(return))
results %>%
arrange(desc(return),risk)
results %>%
arrange(risk,desc(return))
results %>%
arrange(desc(return))
#set vars
group <- 20
select <- 15
iom.combo.get(group, select)$count
start.date <- as.Date("2020-01-01")
end.date <- as.Date("2022-07-31")
#screener <- iom.screener.full("Overview")
tickers <- sort(screener$Ticker[sample(nrow(screener),group)])
data <- iom.data.package(tickers,start.date,end.date,"return.close")
lb.start <- as.Date(max(data$stacked$refdate))
lb.end <- as.Date(lb.start - 45)
combos <- iom.combo.get(group, select)$grid
for(i in seq(ncol(combos))) {
combos[ ,i] <- xlookup(combos[ ,i],c(1:group),tickers)
colnames(combos)[i] <- paste0("Stk",i)
}
lb.data <- data$stacked %>%
filter(refdate >= lb.end & refdate <= lb.start)
comboCount <- nrow(combos)
for(n in seq(comboCount)) {
message(paste0(n,"/",comboCount," ",round(n/comboCount*100,2),"%"),"\r",appendLF=FALSE)
flush.console()
line <- combos[n, ]
lb.hz <- iom.data.matrix(
lb.data %>%
filter(ticker %in% c(transpose(line)$V1)),
"ticker",
"refdate",
"return.close"
)
ret.data <- as.matrix(lb.hz[ ,!sapply(lb.hz, anyNA)])
opt <- portfolio.optim(ret.data, shorts = FALSE)
temp <- tribble(
~comboNum,~return, ~risk, ~stocks,
n, opt$pm, opt$ps, paste(c(transpose(line)$V1), collapse = "-")
)
if(n == 1) {
results <- temp
} else {
results <- rbind(results,temp)
}
}
results %>%
arrange(desc(return))
iom.combo.get(5,3)$grid
#get packages
iom.packages.load()
#set vars
group <- 20
select <- 15
iom.combo.get(group, select)$count
start.date <- as.Date("2020-01-01")
end.date <- as.Date("2022-07-31")
#screener <- iom.screener.full("Overview")
tickers <- sort(screener$Ticker[sample(nrow(screener),group)])
data <- iom.data.package(tickers,start.date,end.date,"return.close")
lb.start <- as.Date(max(data$stacked$refdate))
lb.end <- as.Date(lb.start - 180)
combos <- iom.combo.get(group, select)$grid
for(i in seq(ncol(combos))) {
combos[ ,i] <- xlookup(combos[ ,i],c(1:group),tickers)
colnames(combos)[i] <- paste0("Stk",i)
}
lb.data <- data$stacked %>%
filter(refdate >= lb.end & refdate <= lb.start)
comboCount <- nrow(combos)
for(n in seq(comboCount)) {
message(paste0(n,"/",comboCount," ",round(n/comboCount*100,2),"%"),"\r",appendLF=FALSE)
flush.console()
line <- combos[n, ]
lb.hz <- iom.data.matrix(
lb.data %>%
filter(ticker %in% c(transpose(line)$V1)),
"ticker",
"refdate",
"return.close"
)
ret.data <- as.matrix(lb.hz[ ,!sapply(lb.hz, anyNA)])
opt <- portfolio.optim(ret.data, shorts = FALSE)
temp <- tribble(
~comboNum,~return, ~risk, ~stocks,
n, opt$pm, opt$ps, paste(c(transpose(line)$V1), collapse = "-")
)
if(n == 1) {
results <- temp
} else {
results <- rbind(results,temp)
}
}
results %>%
arrange(desc(return))
setwd("~/terc-capital/tech/it-op-machine")
source("./iom.R")
#get packages
iom.packages.load()
#set vars
group <- 20
select <- 15
iom.combo.get(group, select)$count
start.date <- as.Date("2020-01-01")
end.date <- as.Date("2022-07-31")
screener <- iom.screener.full("Overview")
tickers <- sort(screener$Ticker[sample(nrow(screener),group)])
data <- iom.data.package(tickers,start.date,end.date,"return.close")
lb.start <- as.Date(max(data$stacked$refdate))
lb.end <- as.Date(lb.start - 180)
combos <- iom.combo.get(group, select)$grid
for(i in seq(ncol(combos))) {
combos[ ,i] <- xlookup(combos[ ,i],c(1:group),tickers)
colnames(combos)[i] <- paste0("Stk",i)
}
lb.data <- data$stacked %>%
filter(refdate >= lb.end & refdate <= lb.start)
comboCount <- nrow(combos)
for(n in seq(comboCount)) {
message(paste0(n,"/",comboCount," ",round(n/comboCount*100,2),"%"),"\r",appendLF=FALSE)
flush.console()
line <- combos[n, ]
lb.hz <- iom.data.matrix(
lb.data %>%
filter(ticker %in% c(transpose(line)$V1)),
"ticker",
"refdate",
"return.close"
)
ret.data <- as.matrix(lb.hz[ ,!sapply(lb.hz, anyNA)])
opt <- portfolio.optim(ret.data, shorts = FALSE)
temp <- tribble(
~comboNum,~return, ~risk, ~stocks,
n, opt$pm, opt$ps, paste(c(transpose(line)$V1), collapse = "-")
)
if(n == 1) {
results <- temp
} else {
results <- rbind(results,temp)
}
}
results %>%
arrange(desc(return))
stock_data <- getSymbols(
Symbols = "AAPL",
src = "yahoo",
from = Sys.Date()-365,
to = Sys.Date(),
auto.assign = FALSE
)
stock_data <- Cl(stock_data)
#charting
chart_Series(stock_data, col = "black")
add_SMA(n = 100, on = 1, col = "red")
add_SMA(n = 20, on = 1, col = "black")
add_RSI(n = 14, maType = "SMA")
add_BBands(n = 20, maType = "SMA", sd = 1, on = -1)
add_MACD(fast = 12, slow = 25, signal = 9, maType = "SMA", histogram = TRUE)
stock_log <- log(stock_data)
head(stock_log, n = 10)
plot(stock_log, main = "log stock_data chart")
stock_data <- getSymbols(
Symbols = "AAPL",
src = "yahoo",
from = Sys.Date()-365,
to = Sys.Date(),
auto.assign = FALSE
)
stock_data <- Cl(stock_data)
#charting
chart_Series(stock_data, col = "black")
add_SMA(n = 100, on = 1, col = "red")
add_SMA(n = 20, on = 1, col = "black")
add_RSI(n = 14, maType = "SMA")
add_BBands(n = 20, maType = "SMA", sd = 1, on = -1)
add_MACD(fast = 12, slow = 25, signal = 9, maType = "SMA", histogram = TRUE)
stock_data <- getSymbols(
Symbols = "AAPL",
src = "yahoo",
from = Sys.Date()-90,
to = Sys.Date(),
auto.assign = FALSE
)
stock_data <- Cl(stock_data)
#charting
chart_Series(stock_data, col = "black")
add_SMA(n = 100, on = 1, col = "red")
add_SMA(n = 20, on = 1, col = "black")
add_RSI(n = 14, maType = "SMA")
add_BBands(n = 20, maType = "SMA", sd = 1, on = -1)
add_MACD(fast = 12, slow = 25, signal = 9, maType = "SMA", histogram = TRUE)
stock_data <- getSymbols(
Symbols = "AAPL",
src = "yahoo",
from = Sys.Date()-120,
to = Sys.Date(),
auto.assign = FALSE
)
stock_data <- Cl(stock_data)
#charting
chart_Series(stock_data, col = "black")
add_SMA(n = 100, on = 1, col = "red")
stock_data <- getSymbols(
Symbols = "AAPL",
src = "yahoo",
from = Sys.Date()-180,
to = Sys.Date(),
auto.assign = FALSE
)
stock_data <- Cl(stock_data)
#charting
chart_Series(stock_data, col = "black")
add_SMA(n = 100, on = 1, col = "red")
add_SMA(n = 20, on = 1, col = "black")
add_RSI(n = 14, maType = "SMA")
add_BBands(n = 20, maType = "SMA", sd = 1, on = -1)
add_MACD(fast = 12, slow = 25, signal = 9, maType = "SMA", histogram = TRUE)
10/135
stock_data <- getSymbols(
Symbols = "TSLA",
src = "yahoo",
from = Sys.Date()-365,
to = Sys.Date(),
auto.assign = FALSE
)
stock_data <- Cl(stock_data)
#charting
chart_Series(stock_data, col = "black")
add_SMA(n = 100, on = 1, col = "red")
add_SMA(n = 20, on = 1, col = "black")
add_RSI(n = 14, maType = "SMA")
add_BBands(n = 20, maType = "SMA", sd = 1, on = -1)
add_MACD(fast = 12, slow = 25, signal = 9, maType = "SMA", histogram = TRUE)
source("./iom.R")
#get packages
iom.packages.load()
#set vars
group <- 20
select <- 15
iom.combo.get(group, select)
iom.combo.get(group, select)$count
start.date <- as.Date("2020-01-01")
end.date <- as.Date("2022-07-31")
#screener <- iom.screener.full("Overview")
tickers <- sort(screener$Ticker[sample(nrow(screener),group)])
data <- iom.data.package(tickers,start.date,end.date,"return.close")
lb.start <- as.Date(max(data$stacked$refdate))
lb.end <- as.Date(lb.start - 180)
combos <- iom.combo.get(group, select)$grid
for(i in seq(ncol(combos))) {
combos[ ,i] <- xlookup(combos[ ,i],c(1:group),tickers)
colnames(combos)[i] <- paste0("Stk",i)
}
head(combos)
lb.data <- data$stacked %>%
filter(refdate >= lb.end & refdate <= lb.start)
comboCount <- nrow(combos)
for(n in seq(comboCount)) {
message(paste0(n,"/",comboCount," ",round(n/comboCount*100,2),"%"),"\r",appendLF=FALSE)
flush.console()
line <- combos[n, ]
lb.hz <- iom.data.matrix(
lb.data %>%
filter(ticker %in% c(transpose(line)$V1)),
"ticker",
"refdate",
"return.close"
)
ret.data <- as.matrix(lb.hz[ ,!sapply(lb.hz, anyNA)])
opt <- portfolio.optim(ret.data, shorts = FALSE)
temp <- tribble(
~comboNum,~return, ~risk, ~stocks,
n, opt$pm, opt$ps, paste(c(transpose(line)$V1), collapse = "-")
)
if(n == 1) {
results <- temp
} else {
results <- rbind(results,temp)
}
}
results %>%
arrange(desc(return))
View(read_csv("~/combo_calc_dataset.csv"))
df <- data.frame(x=1:15,
y=c(3, 14, 23, 25, 23, 15, 9, 5, 9, 13, 17, 24, 32, 36, 46))
#create a scatterplot of x vs. y
plot(df$x, df$y, pch=19, xlab='x', ylab='y')
#fit polynomial regression models up to degree 5
fit1 <- lm(y~x, data=df)
fit2 <- lm(y~poly(x,2,raw=TRUE), data=df)
fit3 <- lm(y~poly(x,3,raw=TRUE), data=df)
fit4 <- lm(y~poly(x,4,raw=TRUE), data=df)
fit5 <- lm(y~poly(x,5,raw=TRUE), data=df)
#create a scatterplot of x vs. y
plot(df$x, df$y, pch=19, xlab='x', ylab='y')
#define x-axis values
x_axis <- seq(1, 15, length=15)
#add curve of each model to plot
lines(x_axis, predict(fit1, data.frame(x=x_axis)), col='green')
lines(x_axis, predict(fit2, data.frame(x=x_axis)), col='red')
lines(x_axis, predict(fit3, data.frame(x=x_axis)), col='purple')
lines(x_axis, predict(fit4, data.frame(x=x_axis)), col='blue')
lines(x_axis, predict(fit5, data.frame(x=x_axis)), col='orange')
#calculated adjusted R-squared of each model
summary(fit1)$adj.r.squared
summary(fit2)$adj.r.squared
summary(fit3)$adj.r.squared
summary(fit4)$adj.r.squared
summary(fit5)$adj.r.squared
#create a scatterplot of x vs. y
plot(df$x, df$y, pch=19, xlab='x', ylab='y')
#define x-axis values
x_axis <- seq(1, 15, length=15)
#add curve of fourth-degree polynomial model
lines(x_axis, predict(fit4, data.frame(x=x_axis)), col='blue')
predict(fit4, data.frame(x=x_axis))
summary(fit4)
fit4$coefficients
colnames(fit4$coefficients)
names(fit4$coefficients)
names(fit4$coefficients[-1])
fit4$coefficients
names(fit4$coefficients[-1])
?left
substr()
test <- names(fit4$coefficients[-1])[1]
test
substr(test,1,grep(")",test))
grep(")",test)
unlist(gregexpr(")", test))
substr(test,unlist(gregexpr(")", test)))
length(test)
strsplit
require(stringr)
strsplit(test,unlist(gregexpr(")", test)),len)
strsplit(test,unlist(gregexpr(")", test)))
substr(test,unlist(gregexpr(")", test)),nchar(test))
substr(test,unlist(gregexpr(")", test))+1,nchar(test))
as.numeric(substr(test,unlist(gregexpr(")", test))+1,nchar(test)))
equation <- fit4
equation
int.loc <- grep("(Intercept)",names(equation$coefficients))
int.loc
int.loc <- grep("(Intercepttt)",names(equation$coefficients))
int.loc
is.na(int.loc)
length(int.loc)
int.loc <- grep("(Intercept)",names(equation$coefficients))
length(int.loc)
if(length(int.loc)>0) {
coeff <- equation$coefficients[-int.loc]
}
coeff
length(coeff)
i
i <- 1
coeff.names <- names(coeff)[i]
coeff.names
transpose(coeff)
intercept <- coeff[1]
intercept
intercept <- coeff[1] %>% `names<-`(c())
intercept
for(n in c(2:length(coeff))) {
print(n)
}
n <- 2
coeff
coeff[n]
(coeff[n] * n) %>% `names<-`(c())
iom.derivative.equation <- function(equation, x) {
int.loc <- grep("(Intercept)",names(equation$coefficients))
if(length(int.loc)>0) {
coeff <- equation$coefficients[-int.loc]
}
intercept <- coeff[1] %>% `names<-`(c())
new.equation <- c(intercept)
for(n in c(2:length(coeff))) {
new.coeff <- (coeff[n] * n) %>% `names<-`(c())
new.power <- n-1
new.equation <- append(new.equation, new.coeff)
names(new.equation)[n] <- new.power
}
}
fit4
iom.derivative.equation(fit4, 16)
iom.derivative.equation <- function(equation, x) {
int.loc <- grep("(Intercept)",names(equation$coefficients))
if(length(int.loc)>0) {
coeff <- equation$coefficients[-int.loc]
}
intercept <- coeff[1] %>% `names<-`(c())
new.equation <- c(intercept)
for(n in c(2:length(coeff))) {
new.coeff <- (coeff[n] * n) %>% `names<-`(c())
new.power <- n-1
new.equation <- append(new.equation, new.coeff)
names(new.equation)[n] <- new.power
}
return(new.equation)
}
fit4
iom.derivative.equation(fit4, 16)
iom.derivative.equation <- function(equation, x) {
int.loc <- grep("(Intercept)",names(equation$coefficients))
if(length(int.loc)>0) {
coeff <- equation$coefficients[-int.loc]
}
intercept <- coeff[1] %>% `names<-`(c())
new.equation <- c(intercept)
names(new.equation)[1] <- "Intercept"
for(n in c(2:length(coeff))) {
new.coeff <- (coeff[n] * n) %>% `names<-`(c())
new.power <- n-1
new.equation <- append(new.equation, new.coeff)
names(new.equation)[n] <- new.power
}
return(new.equation)
}
fit4
iom.derivative.equation(fit4, 16)
equation <- iom.derivative.equation(fit4)
equation[grep("Intercept",names(equation))]
intercept <- equation[grep("Intercept",names(equation))] %>% `names<-`(c())
intercept
n <- 2
iom.derivative.equation <- function(equation) {
int.loc <- grep("(Intercept)",names(equation$coefficients))
if(length(int.loc)>0) {
coeff <- equation$coefficients[-int.loc]
}
intercept <- coeff[1] %>% `names<-`(c())
new.equation <- c(intercept)
names(new.equation)[1] <- "Intercept"
for(n in c(2:length(coeff))) {
new.coeff <- (coeff[n] * n) %>% `names<-`(c())
new.power <- n-1
new.equation <- append(new.equation, new.coeff)
names(new.equation)[n] <- new.power
}
return(new.equation)
}
iom.derivative.calculate <- function(equation, x) {
intercept <- equation[grep("Intercept",names(equation))] %>% `names<-`(c())
sum <- intercept
for(n in seq(2:length(equation))) {
sum <- sum + (equation[n] * (x^n))
}
return(sum)
}
fit4
equation <- iom.derivative.equation(fit4)
der <- iom.derivative.calculate(equation, 16)
der
equation
equation <- iom.derivative.equation(fit4)
der <- iom.derivative.calculate(equation, c(1:15))
der
fit4
equation <- iom.derivative.equation(fit4)
der <- iom.derivative.calculate(equation, c(1:16))
der
equation
iom.derivative.equation <- function(equation) {
int.loc <- grep("(Intercept)",names(equation$coefficients))
if(length(int.loc)>0) {
coeff <- equation$coefficients[-int.loc]
}
intercept <- coeff[1] %>% `names<-`(c())
new.equation <- c(intercept)
names(new.equation)[1] <- "Intercept"
for(n in c(2:length(coeff))) {
new.coeff <- (coeff[n] * n) %>% `names<-`(c())
new.power <- n-1
new.equation <- append(new.equation, new.coeff)
names(new.equation)[n] <- new.power
}
return(new.equation)
}
iom.derivative.calculate <- function(equation, x) {
intercept <- equation[grep("Intercept",names(equation))] %>% `names<-`(c())
sum <- intercept
for(n in seq(2:length(equation))) {
sum <- sum + (equation[n] * (x^(n-1)))
}
return(sum)
}
fit4
equation <- iom.derivative.equation(fit4)
der <- iom.derivative.calculate(equation, c(1:16))
der
plot(der)
source("~/terc-capital/tech/it-op-machine/iom.R")
